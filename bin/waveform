#!/usr/bin/env ruby
require "waveform"
require "optparse"

# Parse color string
def parse_color color
  if color == "transparent"
    :transparent
  else
    color.match(/#.*/) ? color : "##{color}"
  end
end

options = Waveform::DefaultOptions
optparse = OptionParser.new do |o|
  o.banner = "Usage: waveform [options] source_audio [ouput.png]"
  o.version = Waveform::VERSION
  
  o.on("-W", "--width WIDTH", "Width (in pixels) of generated waveform image -- Default #{Waveform::DefaultOptions[:width]}.") do |width|
    options[:width] = width.to_i
  end

  o.on("-H", "--height HEIGHT", "Height (in pixels) of generated waveform image -- Default #{Waveform::DefaultOptions[:height]}.") do |height|
    options[:height] = height.to_i
  end

  o.on("-c", "--color COLOR", "Color (hex code) to draw the waveform. Can also pass 'transparent' to cut it out of the background -- Default #{Waveform::DefaultOptions[:color]}.") do |color|
    options[:color] = parse_color(color)
  end

  o.on("-b", "--background COLOR", "Background color (hex code) to draw waveform on -- Default #{Waveform::DefaultOptions[:background_color]}.") do |color|
    options[:background_color] = parse_color(color)
  end

  o.on("-m", "--method METHOD", "Wave analyzation method (can be 'peak' or 'rms') -- Default '#{Waveform::DefaultOptions[:method]}'.") do |method|
    options[:method] = method.to_sym
  end

  options[:logger] = $stdout
  o.on("-q", "--quiet", "Don't print anything out when generating waveform") do
    options[:logger] = nil
  end

  o.on("-d", "--seconds-color COLOR", "Seconds mark color -- Default '#{Waveform::DefaultOptions[:seconds_color]}'.") do |color|
    options[:seconds_color] = parse_color(color)
  end

  options[:print_seconds] = false
  o.on("-s", "--secs [TIME]", "Print seconds mark. If time not defined the time range will be 1 second.") do |time|
    options[:print_seconds] = true
    options[:time] = (time || 1.0).to_f # one second by default
  end

  options[:force] = false
  o.on("-F", "--force", "Force generationg of waveform if file exists") do
    options[:force] = true
  end

  o.on("-h", "--help", "Display this screen") do
    puts o
    exit
  end
end

optparse.parse!

begin
  Waveform.generate(ARGV[0], ARGV[1] || "waveform.png", options)
rescue Waveform::ArgumentError => e
  puts e.message + "\n\n"
  puts optparse
rescue Waveform::RuntimeError => e
  puts e.message
end
